{"ast":null,"code":"var _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}(); // Manages the updates of all `<ReactTimeAgo/>` elements on a page.\n// The reasons for going with `requestAnimationFrame()`:\n// * `requestAnimationFrame` won't be called when a tab is in background.\n// * Chrome has bugs when handling `setTimeout()`: https://www.npmjs.com/package/request-animation-frame-timeout\n// `requestAnimationFrame()` polyfill for old browsers.\n\n\nimport requestAnimationFrame from 'raf';\nimport binarySearch from './helpers/binarySearch';\nexport default {\n  instances: [],\n  add: function add(instance) {\n    var _this = this;\n\n    var wasIdle = this.instances.length === 0;\n\n    _add(this.instances, instance);\n\n    if (wasIdle) {\n      this.start();\n    }\n\n    return {\n      stop: function stop() {\n        remove(_this.instances, instance);\n\n        if (_this.instances.length === 0) {\n          _this.stop();\n        }\n      },\n      forceUpdate: function forceUpdate() {\n        updateInstance(instance, _this.instances);\n      }\n    };\n  },\n  tick: function tick() {\n    var now = Date.now();\n\n    while (true) {\n      var instance = this.instances[0];\n\n      if (now >= instance.nextUpdateTime) {\n        updateInstance(instance, this.instances);\n      } else {\n        break;\n      }\n    }\n  },\n  scheduleNextTick: function scheduleNextTick() {\n    var _this2 = this;\n\n    this.scheduledTick = requestAnimationFrame(function () {\n      _this2.tick();\n\n      _this2.scheduleNextTick();\n    });\n  },\n  start: function start() {\n    this.scheduleNextTick();\n  },\n  stop: function stop() {\n    requestAnimationFrame.cancel(this.scheduledTick);\n  }\n};\n\nfunction _updateInstance(instance) {\n  var _instance$getNextValu = instance.getNextValue(),\n      _instance$getNextValu2 = _slicedToArray(_instance$getNextValu, 2),\n      value = _instance$getNextValu2[0],\n      nextUpdateTime = _instance$getNextValu2[1];\n\n  instance.setValue(value);\n  instance.nextUpdateTime = nextUpdateTime;\n}\n\nfunction updateInstance(instance, instances) {\n  _updateInstance(instance);\n\n  remove(instances, instance);\n\n  _add(instances, instance);\n}\n\nfunction _add(instances, instance) {\n  var i = findTargetIndex(instances, instance);\n  instances.splice(i, 0, instance);\n}\n\nfunction remove(instances, instance) {\n  var i = instances.indexOf(instance);\n  instances.splice(i, 1);\n}\n\nfunction findTargetIndex(instances, instance) {\n  var nextUpdateTime = instance.nextUpdateTime;\n  return binarySearch(instances, function (instance) {\n    if (instance.nextUpdateTime === nextUpdateTime) {\n      return 0;\n    } else if (instance.nextUpdateTime > nextUpdateTime) {\n      return 1;\n    } else {\n      return -1;\n    }\n  });\n}","map":{"version":3,"sources":["../source/Updater.js"],"names":["instances","add","wasIdle","stop","remove","forceUpdate","updateInstance","tick","now","Date","instance","scheduleNextTick","start","requestAnimationFrame","value","nextUpdateTime","_updateInstance","i","findTargetIndex"],"mappings":"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","sourcesContent":["// Manages the updates of all `<ReactTimeAgo/>` elements on a page.\r\n\r\n// The reasons for going with `requestAnimationFrame()`:\r\n// * `requestAnimationFrame` won't be called when a tab is in background.\r\n// * Chrome has bugs when handling `setTimeout()`: https://www.npmjs.com/package/request-animation-frame-timeout\r\n\r\n// `requestAnimationFrame()` polyfill for old browsers.\r\nimport requestAnimationFrame from 'raf'\r\n\r\nimport binarySearch from './helpers/binarySearch'\r\n\r\nexport default {\r\n\tinstances: [],\r\n\tadd(instance) {\r\n\t\tconst wasIdle = this.instances.length === 0\r\n\t\tadd(this.instances, instance)\r\n\t\tif (wasIdle) {\r\n\t\t\tthis.start()\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tstop: () => {\r\n\t\t\t\tremove(this.instances, instance)\r\n\t\t\t\tif (this.instances.length === 0) {\r\n\t\t\t\t\tthis.stop()\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tforceUpdate: () => {\r\n\t\t\t\tupdateInstance(instance, this.instances)\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\ttick() {\r\n\t\tconst now = Date.now()\r\n\t\twhile (true) {\r\n\t\t\tconst instance = this.instances[0]\r\n\t\t\tif (now >= instance.nextUpdateTime) {\r\n\t\t\t\tupdateInstance(instance, this.instances)\r\n\t\t\t} else {\r\n\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\tscheduleNextTick() {\r\n\t\tthis.scheduledTick = requestAnimationFrame(() => {\r\n\t\t\tthis.tick()\r\n\t\t\tthis.scheduleNextTick()\r\n\t\t})\r\n\t},\r\n\tstart() {\r\n\t\tthis.scheduleNextTick()\r\n\t},\r\n\tstop() {\r\n\t\trequestAnimationFrame.cancel(this.scheduledTick)\r\n\t}\r\n}\r\n\r\nfunction _updateInstance(instance) {\r\n\tconst [value, nextUpdateTime] = instance.getNextValue()\r\n\tinstance.setValue(value)\r\n\tinstance.nextUpdateTime = nextUpdateTime\r\n}\r\n\r\nfunction updateInstance(instance, instances) {\r\n\t_updateInstance(instance)\r\n\tremove(instances, instance)\r\n\tadd(instances, instance)\r\n}\r\n\r\nfunction add(instances, instance) {\r\n\tconst i = findTargetIndex(instances, instance)\r\n\tinstances.splice(i, 0, instance)\r\n}\r\n\r\nfunction remove(instances, instance) {\r\n\tconst i = instances.indexOf(instance)\r\n\tinstances.splice(i, 1)\t\r\n}\r\n\r\nfunction findTargetIndex(instances, instance) {\r\n\tconst { nextUpdateTime } = instance\r\n\treturn binarySearch(instances, (instance) => {\r\n\t\tif (instance.nextUpdateTime === nextUpdateTime) {\r\n\t\t\treturn 0\r\n\t\t} else if (instance.nextUpdateTime > nextUpdateTime) {\r\n\t\t\treturn 1\r\n\t\t} else {\r\n\t\t\treturn -1\r\n\t\t}\r\n\t})\r\n}"]},"metadata":{},"sourceType":"module"}