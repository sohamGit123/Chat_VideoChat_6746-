{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Raj\\\\Desktop\\\\Social Networking\\\\Frontend\\\\client\\\\src\\\\components\\\\screens\\\\Home.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport { UserContext } from '../../App';\n\nconst Home = () => {\n  _s();\n\n  const [data, setData] = useState([]);\n  const {\n    state,\n    dispatch\n  } = useContext(UserContext);\n  useEffect(() => {\n    fetch('/allpost', {\n      headers: {\n        \"Authorization\": \"token \" + localStorage.getItem(\"jwt\")\n      }\n    }).then(res => res.json()).then(result => {\n      //console.log(result)\n      setData(result.posts);\n    });\n  }, []);\n\n  const likePost = id => {\n    fetch('/like', {\n      method: \"put\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"token \" + localStorage.getItem(\"jwt\")\n      },\n      body: JSON.stringify({\n        postId: id\n      })\n    }).then(res => res.json()).then(result => {\n      //result means the updated post\n      const newdata = data.map(item => {\n        if (item._id == result._id) {\n          return result;\n        } else {\n          return item;\n        }\n      }); //newdata means the entire updated array consisting of all the posts of every user in the home page.\n\n      setData(newdata);\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  const unlikePost = id => {\n    fetch('/unlike', {\n      method: \"put\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"token \" + localStorage.getItem(\"jwt\")\n      },\n      body: JSON.stringify({\n        postId: id\n      })\n    }).then(res => res.json()).then(result => {\n      // console.log(\"result: \"+JSON.stringify(result))\n      // console.log(\"item: \"+JSON.stringify(data[0]))\n      const newdata = data.map(item => {\n        if (item._id == result._id) {\n          return result;\n        } else {\n          return item;\n        }\n      }); //newdata means the entire updated array consisting of all the posts of every user in the home page.\n\n      setData(newdata);\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  const makeComment = (text, postId) => {\n    fetch('/comment', {\n      method: \"put\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"token \" + localStorage.getItem(\"jwt\")\n      },\n      body: JSON.stringify({\n        postId,\n        text\n      })\n    }).then(res => res.json()).then(result => {\n      console.log(result);\n      const newdata = data.map(item => {\n        if (item._id == result._id) {\n          return result;\n        } else {\n          return item;\n        }\n      });\n      setData(newdata);\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  const deletepost = postid => {\n    fetch('/deletepost/' + postid, {\n      method: \"delete\",\n      headers: {\n        Authorization: \"token \" + localStorage.getItem(\"jwt\")\n      }\n    }).then(res => res.json()).then(result => {\n      console.log(result); //Printing the deleted post in the console.\n\n      const newData = data.filter(item => {\n        return item._id != result._id;\n      });\n      setData(newData);\n    });\n  };\n\n  const [currentPost, setCurrentPost] = useState(\"\");\n  console.log(data);\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 9\n  }, this) // <div className=\"home\">\n  //     {\n  //         data.map(item=>{\n  //             return (\n  //                 <div key={item._id} className=\"card home-card\">\n  //                     <h5 \n  //                         style={{color:\"grey\",fontFamily:'cursive',paddingLeft:'20px',paddingTop:'10px'}}>Posted by {item.postedBy.name}\n  //                         {/*item.postedBy._id refers to the post id and state._id refers to the user id*/}\n  //                         {((item.postedBy._id==state._id) || (state.isadmin==true)) \n  //                         && <i className=\"material-icons\" style={{float:\"right\",cursor:\"pointer\"}}\n  //                         onClick={()=>{deletepost(item._id)}}\n  //                     >delete</i>}\n  //                     </h5>\n  //                     <div className=\"card-content\">\n  //                         <h6>{item.title}</h6>\n  //                         <p>{item.body}</p>\n  //                     </div>\n  //                     <div className=\"card-image card-content\">\n  //                         <img src={item.photo}/>\n  //                     </div>\n  //                     <div className=\"card-content\">\n  //                         <i className=\"material-icons\" style={{color: \"red\"}}>favorite</i>\n  //                         {\n  //                             item.likes.includes(state._id)\n  //                             ?\n  //                             <i className=\"material-icons\" style={{cursor: 'pointer'}} onClick={()=>{unlikePost(item._id)}}>thumb_down</i>\n  //                             :\n  //                             <i className=\"material-icons\" style={{cursor: 'pointer'}} onClick={()=>{likePost(item._id)}}>thumb_up</i>\n  //                         }\n  //                         <button type=\"button\" class=\"btn btn-primary\" style={{float:\"right\"}}>Report</button>\n  //                         <h6>{item.likes.length} likes</h6>\n  //                         {\n  //                             (item._id==currentPost) \n  //                             ?\n  //                             item.comments.map(record=>{\n  //                                 return (\n  //                                     <h6 key={record._id}><span style={{fontWeight:\"700\"}}>{record.postedBy.name} </span>{record.text}</h6>\n  //                                 )\n  //                             })\n  //                             :\n  //                             <p style={{fontWeight:\"300\"}}>Click on show below to check comments..</p>\n  //                         }\n  //                         <form onSubmit={(e)=>{\n  //                             e.preventDefault()\n  //                             makeComment(e.target[0].value,item._id)\n  //                             e.target[0].value=\"\"//I added this line\n  //                         }}>\n  //                             <input type=\"text\" placeholder=\"Add a comment\"/>\n  //                             {\n  //                                 (item._id==currentPost)\n  //                                 ?\n  //                                 <button type=\"button\" class=\"btn btn-primary\" onClick={()=>{setCurrentPost(\"\")}}>Hide</button>\n  //                                 :\n  //                                 <button type=\"button\" class=\"btn btn-primary\" onClick={()=>{setCurrentPost(item._id)}}>Show</button>\n  //                             }\n  //                         </form>\n  //                     </div>\n  //                 </div>\n  //             )\n  //         })\n  //     }\n  // </div>\n  ;\n};\n\n_s(Home, \"+etKQrB+hd0e3LfUyfVubcZAnJY=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["C:/Users/Raj/Desktop/Social Networking/Frontend/client/src/components/screens/Home.js"],"names":["React","useState","useEffect","useContext","UserContext","Home","data","setData","state","dispatch","fetch","headers","localStorage","getItem","then","res","json","result","posts","likePost","id","method","body","JSON","stringify","postId","newdata","map","item","_id","catch","err","console","log","unlikePost","makeComment","text","deletepost","postid","Authorization","newData","filter","currentPost","setCurrentPost"],"mappings":"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","sourcesContent":["import React,{useState,useEffect,useContext} from 'react'\r\nimport {UserContext} from '../../App'\r\n\r\nconst Home=()=>{\r\n    const [data,setData]=useState([])\r\n    const {state,dispatch}=useContext(UserContext)\r\n    useEffect(()=>{\r\n        fetch('/allpost',{\r\n            headers:{\r\n                \"Authorization\": \"token \" + localStorage.getItem(\"jwt\")\r\n            }\r\n        }).then(res=>res.json())\r\n        .then(result=>{\r\n            //console.log(result)\r\n            setData(result.posts)\r\n        })\r\n    },[])\r\n\r\n    const likePost=(id)=>{\r\n        fetch('/like',{\r\n            method: \"put\",\r\n            headers:{\r\n                \"Content-Type\":\"application/json\",\r\n                \"Authorization\":\"token \"+localStorage.getItem(\"jwt\")\r\n            },\r\n            body:JSON.stringify({\r\n                postId:id\r\n            })\r\n        }).then(res=>res.json())\r\n        .then(result=>{\r\n            //result means the updated post\r\n            const newdata=data.map(item=>{\r\n                if(item._id==result._id){\r\n                    return result\r\n                }\r\n                else{\r\n                    return item\r\n                }\r\n            })\r\n            //newdata means the entire updated array consisting of all the posts of every user in the home page.\r\n            setData(newdata)\r\n        })\r\n        .catch(err=>{\r\n            console.log(err)\r\n        })\r\n    }\r\n    const unlikePost=(id)=>{\r\n        fetch('/unlike',{\r\n            method: \"put\",\r\n            headers:{\r\n                \"Content-Type\":\"application/json\",\r\n                \"Authorization\":\"token \"+localStorage.getItem(\"jwt\")\r\n            },\r\n            body:JSON.stringify({\r\n                postId:id\r\n            })\r\n        }).then(res=>res.json())\r\n        .then(result=>{\r\n            // console.log(\"result: \"+JSON.stringify(result))\r\n            // console.log(\"item: \"+JSON.stringify(data[0]))\r\n            const newdata=data.map(item=>{\r\n                if(item._id==result._id){\r\n                    return result\r\n                }\r\n                else{\r\n                    return item\r\n                }\r\n            })\r\n            //newdata means the entire updated array consisting of all the posts of every user in the home page.\r\n            setData(newdata)\r\n        })\r\n        .catch(err=>{\r\n            console.log(err)\r\n        })\r\n    }\r\n\r\n    const makeComment=(text,postId)=>{\r\n        fetch('/comment',{\r\n            method:\"put\",\r\n            headers:{\r\n                \"Content-Type\":\"application/json\",\r\n                \"Authorization\":\"token \"+localStorage.getItem(\"jwt\")\r\n            },\r\n            body:JSON.stringify({\r\n                postId,\r\n                text\r\n            })\r\n        })\r\n        .then(res=>res.json())\r\n        .then(result=>{\r\n            console.log(result)\r\n            const newdata=data.map(item=>{\r\n                if(item._id==result._id){\r\n                    return result\r\n                }\r\n                else{\r\n                    return item\r\n                }\r\n            })\r\n            setData(newdata)\r\n        })\r\n        .catch(err=>{\r\n            console.log(err)\r\n        })\r\n    }\r\n\r\n    const deletepost=(postid)=>{\r\n        fetch('/deletepost/'+postid,{\r\n            method: \"delete\",\r\n            headers: {\r\n                Authorization: \"token \"+localStorage.getItem(\"jwt\")\r\n            }\r\n        }).then(res=>res.json())\r\n        .then(result=>{\r\n            console.log(result)//Printing the deleted post in the console.\r\n            const newData=data.filter(item=>{\r\n                return item._id!=result._id\r\n            })\r\n            setData(newData)\r\n        })\r\n    }\r\n\r\n    const [currentPost,setCurrentPost]=useState(\"\")\r\n    console.log(data)\r\n\r\n    return (\r\n        <div></div>\r\n        // <div className=\"home\">\r\n        //     {\r\n        //         data.map(item=>{\r\n        //             return (\r\n        //                 <div key={item._id} className=\"card home-card\">\r\n        //                     <h5 \r\n        //                         style={{color:\"grey\",fontFamily:'cursive',paddingLeft:'20px',paddingTop:'10px'}}>Posted by {item.postedBy.name}\r\n        //                         {/*item.postedBy._id refers to the post id and state._id refers to the user id*/}\r\n        //                         {((item.postedBy._id==state._id) || (state.isadmin==true)) \r\n        //                         && <i className=\"material-icons\" style={{float:\"right\",cursor:\"pointer\"}}\r\n        //                         onClick={()=>{deletepost(item._id)}}\r\n\r\n        //                     >delete</i>}\r\n        //                     </h5>\r\n        //                     <div className=\"card-content\">\r\n        //                         <h6>{item.title}</h6>\r\n        //                         <p>{item.body}</p>\r\n        //                     </div>\r\n        //                     <div className=\"card-image card-content\">\r\n        //                         <img src={item.photo}/>\r\n        //                     </div>\r\n        //                     <div className=\"card-content\">\r\n        //                         <i className=\"material-icons\" style={{color: \"red\"}}>favorite</i>\r\n        //                         {\r\n        //                             item.likes.includes(state._id)\r\n        //                             ?\r\n        //                             <i className=\"material-icons\" style={{cursor: 'pointer'}} onClick={()=>{unlikePost(item._id)}}>thumb_down</i>\r\n        //                             :\r\n        //                             <i className=\"material-icons\" style={{cursor: 'pointer'}} onClick={()=>{likePost(item._id)}}>thumb_up</i>\r\n        //                         }\r\n        //                         <button type=\"button\" class=\"btn btn-primary\" style={{float:\"right\"}}>Report</button>\r\n        //                         <h6>{item.likes.length} likes</h6>\r\n        //                         {\r\n        //                             (item._id==currentPost) \r\n        //                             ?\r\n        //                             item.comments.map(record=>{\r\n        //                                 return (\r\n        //                                     <h6 key={record._id}><span style={{fontWeight:\"700\"}}>{record.postedBy.name} </span>{record.text}</h6>\r\n        //                                 )\r\n        //                             })\r\n        //                             :\r\n        //                             <p style={{fontWeight:\"300\"}}>Click on show below to check comments..</p>\r\n        //                         }\r\n        //                         <form onSubmit={(e)=>{\r\n        //                             e.preventDefault()\r\n        //                             makeComment(e.target[0].value,item._id)\r\n        //                             e.target[0].value=\"\"//I added this line\r\n        //                         }}>\r\n        //                             <input type=\"text\" placeholder=\"Add a comment\"/>\r\n        //                             {\r\n        //                                 (item._id==currentPost)\r\n        //                                 ?\r\n        //                                 <button type=\"button\" class=\"btn btn-primary\" onClick={()=>{setCurrentPost(\"\")}}>Hide</button>\r\n        //                                 :\r\n        //                                 <button type=\"button\" class=\"btn btn-primary\" onClick={()=>{setCurrentPost(item._id)}}>Show</button>\r\n        //                             }\r\n                                    \r\n        //                         </form>\r\n        //                     </div>\r\n        //                 </div>\r\n        //             )\r\n        //         })\r\n        //     }\r\n\r\n        // </div>\r\n    )\r\n}\r\n\r\nexport default Home"]},"metadata":{},"sourceType":"module"}