{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Raj\\\\Desktop\\\\Social Networking\\\\Frontend\\\\client\\\\src\\\\components\\\\screens\\\\UserProfile.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useContext } from 'react';\nimport { UserContext } from '../../App';\nimport { useParams } from 'react-router-dom';\n\nconst Profile = () => {\n  _s();\n\n  const [userProfile, setProfile] = useState(null);\n  const {\n    state,\n    dispatch\n  } = useContext(UserContext);\n  const {\n    userid\n  } = useParams();\n  console.log(\"state in user profile becomes \" + JSON.stringify(state)); //const [showFollowers,setShowFollowers]=useState(true)\n  // console.log(userProfile)\n\n  useEffect(() => {\n    fetch(`/user/${userid}`, {\n      headers: {\n        \"Authorization\": \"token \" + localStorage.getItem(\"jwt\")\n      }\n    }).then(res => res.json()).then(result => {\n      setProfile(result); // console.log(\"result=\"+JSON.stringify(result))\n    });\n  }, []);\n\n  const likePost = id => {\n    fetch('/like', {\n      method: \"put\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"token \" + localStorage.getItem(\"jwt\")\n      },\n      body: JSON.stringify({\n        postId: id\n      })\n    }).then(res => res.json()).then(result => {\n      //result means the updated post\n      const newdata = {\n        user: userProfile.user,\n        posts: {}\n      };\n      newdata.posts = userProfile.posts.map(item => {\n        if (item._id == result._id) {\n          return result;\n        } else {\n          return item;\n        }\n      }); //newdata means the entire updated array consisting of all the posts of every user in the home page.\n\n      setProfile(newdata);\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  const unlikePost = id => {\n    fetch('/unlike', {\n      method: \"put\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"token \" + localStorage.getItem(\"jwt\")\n      },\n      body: JSON.stringify({\n        postId: id\n      })\n    }).then(res => res.json()).then(result => {\n      // console.log(\"result: \"+JSON.stringify(result))\n      // console.log(\"item: \"+JSON.stringify(data[0]))\n      const newdata = {\n        user: userProfile.user,\n        posts: {}\n      };\n      newdata.posts = userProfile.posts.map(item => {\n        if (item._id == result._id) {\n          return result;\n        } else {\n          return item;\n        }\n      }); //newdata means the entire updated array consisting of all the posts of every user in the home page.\n\n      setProfile(newdata);\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  const loveReact = id => {\n    fetch('/fav', {\n      method: \"put\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"token \" + localStorage.getItem(\"jwt\")\n      },\n      body: JSON.stringify({\n        postId: id\n      })\n    }).then(res => res.json()).then(result => {\n      //result means the updated post\n      const newdata = {\n        user: userProfile.user,\n        posts: {}\n      };\n      newdata.posts = userProfile.posts.map(item => {\n        if (item._id == result._id) {\n          return result;\n        } else {\n          return item;\n        }\n      }); //newdata means the entire updated array consisting of all the posts of every user in the home page.\n\n      setProfile(newdata);\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  const removeLoveReact = id => {\n    fetch('/removefav', {\n      method: \"put\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"token \" + localStorage.getItem(\"jwt\")\n      },\n      body: JSON.stringify({\n        postId: id\n      })\n    }).then(res => res.json()).then(result => {\n      // console.log(\"result: \"+JSON.stringify(result))\n      // console.log(\"item: \"+JSON.stringify(data[0]))\n      const newdata = {\n        user: userProfile.user,\n        posts: {}\n      };\n      newdata.posts = userProfile.posts.map(item => {\n        if (item._id == result._id) {\n          return result;\n        } else {\n          return item;\n        }\n      }); //newdata means the entire updated array consisting of all the posts of every user in the home page.\n\n      setProfile(newdata);\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  const reporting = id => {\n    fetch('/report', {\n      method: \"put\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"token \" + localStorage.getItem(\"jwt\")\n      },\n      body: JSON.stringify({\n        postId: id\n      })\n    }).then(res => res.json()).then(result => {\n      //result means the updated post\n      const newdata = {\n        user: userProfile.user,\n        posts: {}\n      };\n      newdata.posts = userProfile.posts.map(item => {\n        if (item._id == result._id) {\n          return result;\n        } else {\n          return item;\n        }\n      }); //newdata means the entire updated array consisting of all the posts of every user in the home page.\n\n      setProfile(newdata);\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  const withdrawing = id => {\n    fetch('/rmvreport', {\n      method: \"put\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"token \" + localStorage.getItem(\"jwt\")\n      },\n      body: JSON.stringify({\n        postId: id\n      })\n    }).then(res => res.json()).then(result => {\n      // console.log(\"result: \"+JSON.stringify(result))\n      // console.log(\"item: \"+JSON.stringify(data[0]))\n      const newdata = {\n        user: userProfile.user,\n        posts: {}\n      };\n      newdata.posts = userProfile.posts.map(item => {\n        if (item._id == result._id) {\n          return result;\n        } else {\n          return item;\n        }\n      }); //newdata means the entire updated array consisting of all the posts of every user in the home page.\n\n      setProfile(newdata);\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  const makeComment = (text, postId) => {\n    fetch('/comment', {\n      method: \"put\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"token \" + localStorage.getItem(\"jwt\")\n      },\n      body: JSON.stringify({\n        postId,\n        text\n      })\n    }).then(res => res.json()).then(result => {\n      const newdata = {\n        user: userProfile.user,\n        posts: {}\n      };\n      newdata.posts = userProfile.posts.map(item => {\n        if (item._id == result._id) {\n          return result;\n        } else {\n          return item;\n        }\n      });\n      setProfile(newdata);\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  const deletepost = postid => {\n    fetch('/deletepost/' + postid, {\n      method: \"delete\",\n      headers: {\n        Authorization: \"token \" + localStorage.getItem(\"jwt\")\n      }\n    }).then(res => res.json()).then(result => {\n      const newdata = {\n        user: userProfile.user,\n        posts: {}\n      };\n      newdata.posts = userProfile.posts.filter(item => {\n        return item._id != result._id;\n      });\n      setProfile(newdata);\n    });\n  };\n\n  const followUser = () => {\n    fetch('/follow', {\n      method: \"put\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"token \" + localStorage.getItem('jwt')\n      },\n      body: JSON.stringify({\n        followId: userid\n      })\n    }).then(res => res.json()).then(data => {\n      console.log(data);\n      dispatch({\n        type: \"UPDATE\",\n        payload: data\n      });\n      localStorage.setItem(\"user\", JSON.stringify(data));\n      setProfile(prevstate => {\n        // console.log(\"hi\")\n        // console.log(prevstate)\n        // console.log(data)\n        // console.log(\"hello\")\n        return { ...prevstate,\n          user: { ...prevstate.user,\n            followers: [...prevstate.user.followers, data._id]\n          }\n        };\n      }); //setShowFollowers(false)\n    });\n  };\n\n  const unfollowUser = () => {\n    fetch('/unfollow', {\n      method: \"put\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"token \" + localStorage.getItem('jwt')\n      },\n      body: JSON.stringify({\n        unfollowId: userid\n      })\n    }).then(res => res.json()).then(data => {\n      console.log(data);\n      dispatch({\n        type: \"UPDATE\",\n        payload: data\n      });\n      localStorage.setItem(\"user\", JSON.stringify(data));\n      setProfile(prevstate => {\n        // console.log(\"hi\")\n        // console.log(prevstate)\n        // console.log(data)\n        // console.log(\"hello\")\n        const newfollower = prevstate.user.followers.filter(item => {\n          // console.log(\"item=\"+item)\n          // console.log(\"item._id=\"+item._id)//id of any random follower in the followers array\n          // console.log(\"data=\"+JSON.stringify(data))\n          // console.log(\"data._id=\"+data._id)//id of logged in user.\n          return item != data._id; //means we are selecting all the followers from the followers array except the logged in follower.\n        });\n        return { ...prevstate,\n          user: { ...prevstate.user,\n            followers: newfollower\n          }\n        };\n      }); //setShowFollowers(true)\n    });\n  };\n\n  const [currentPost, setCurrentPost] = useState(\"\"); //console.log(\"state=\"+JSON.stringify(state))\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: !userProfile ? /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"LOADING...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 23\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        maxWidth: \"550px\",\n        margin: \"0px auto\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          justifyContent: \"space-around\",\n          margin: \"18px 0px\",\n          borderBottom: \"1px solid grey\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            style: {\n              width: \"160px\",\n              height: \"160px\",\n              borderRadius: \"80px\"\n            },\n            src: \"https://images.unsplash.com/photo-1609439408825-b2a24e29871f?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=334&q=80\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: userProfile.user.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n            children: userProfile.user.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              width: \"108%\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n              children: [userProfile.posts.length, \" posts\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 347,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n              children: [userProfile.user.followers.length, \" followers\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 348,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n              children: [userProfile.user.following.length, \" followings\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 349,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              padding: \"10px\"\n            },\n            children: !state.following.includes(userProfile.user._id) ? /*#__PURE__*/_jsxDEV(\"button\", {\n              class: \"btn waves-effect waves-light\",\n              onClick: () => followUser(),\n              children: \"Follow\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 355,\n              columnNumber: 29\n            }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n              class: \"btn waves-effect waves-light\",\n              onClick: () => unfollowUser(),\n              children: \"Unfollow\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 359,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gallery\",\n        children: userProfile.posts.map(item => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card profile-card\",\n              children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                style: {\n                  color: \"grey\",\n                  fontFamily: 'cursive',\n                  paddingLeft: '20px',\n                  paddingTop: '10px'\n                },\n                children: [\"Posted by \", item.postedBy.name, (item.postedBy._id == state._id || state.isadmin && item.reports.length > 0) && /*#__PURE__*/_jsxDEV(\"i\", {\n                  className: \"material-icons\",\n                  style: {\n                    float: \"right\",\n                    cursor: \"pointer\"\n                  },\n                  onClick: () => {\n                    deletepost(item._id);\n                  },\n                  children: \"delete\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 377,\n                  columnNumber: 40\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 372,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"card-content\",\n                children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n                  children: item.title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 382,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: item.body\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 383,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 381,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"card-image card-content\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: item.photo\n                }, item._id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 386,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 385,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"card-content\",\n                children: [item.favourite.includes(state._id) ? /*#__PURE__*/_jsxDEV(\"i\", {\n                  className: \"material-icons\",\n                  style: {\n                    color: \"red\",\n                    cursor: \"pointer\"\n                  },\n                  onClick: () => {\n                    removeLoveReact(item._id);\n                  },\n                  children: \"favorite\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 392,\n                  columnNumber: 45\n                }, this) : /*#__PURE__*/_jsxDEV(\"i\", {\n                  className: \"material-icons\",\n                  style: {\n                    color: \"red\",\n                    cursor: \"pointer\"\n                  },\n                  onClick: () => {\n                    loveReact(item._id);\n                  },\n                  children: \"favorite_border\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 394,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: [item.favourite.length, \"    \"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 396,\n                  columnNumber: 41\n                }, this), item.likes.includes(state._id) ? /*#__PURE__*/_jsxDEV(\"i\", {\n                  className: \"material-icons\",\n                  style: {\n                    cursor: 'pointer'\n                  },\n                  onClick: () => {\n                    unlikePost(item._id);\n                  },\n                  children: \"thumb_up\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 400,\n                  columnNumber: 45\n                }, this) : /*#__PURE__*/_jsxDEV(\"i\", {\n                  className: \"material-icons\",\n                  style: {\n                    cursor: 'pointer'\n                  },\n                  onClick: () => {\n                    likePost(item._id);\n                  },\n                  children: \"thumb_up_off_alt\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 402,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: item.likes.length\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 404,\n                  columnNumber: 41\n                }, this), !(state.isadmin || item.postedBy._id == state._id) ? item.reports.includes(state._id) ? /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn btn-primary\",\n                  style: {\n                    float: \"right\"\n                  },\n                  onClick: () => {\n                    withdrawing(item._id);\n                  },\n                  children: \"Reported\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 410,\n                  columnNumber: 45\n                }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn btn-primary\",\n                  style: {\n                    float: \"right\"\n                  },\n                  onClick: () => {\n                    reporting(item._id);\n                  },\n                  children: \"Report\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 412,\n                  columnNumber: 45\n                }, this) : \"\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 416,\n                  columnNumber: 41\n                }, this), state.isadmin ? /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"reported \", item.reports.length, \" times\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 420,\n                  columnNumber: 45\n                }, this) : \"\", item._id == currentPost ? item.comments.map(record => {\n                  return /*#__PURE__*/_jsxDEV(\"h6\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      style: {\n                        fontWeight: \"700\"\n                      },\n                      children: [record.postedBy.name, \" \"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 429,\n                      columnNumber: 74\n                    }, this), record.text]\n                  }, record._id, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 429,\n                    columnNumber: 53\n                  }, this);\n                }) : /*#__PURE__*/_jsxDEV(\"p\", {\n                  style: {\n                    fontWeight: \"300\"\n                  },\n                  children: \"Click on show below to check comments..\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 433,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n                  onSubmit: e => {\n                    e.preventDefault();\n                    makeComment(e.target[0].value, item._id);\n                    e.target[0].value = \"\"; //I added this line\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"text\",\n                    placeholder: \"Add a comment\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 440,\n                    columnNumber: 45\n                  }, this), item._id == currentPost ? /*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"button\",\n                    class: \"btn btn-primary\",\n                    onClick: () => {\n                      setCurrentPost(\"\");\n                    },\n                    children: \"Hide\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 444,\n                    columnNumber: 49\n                  }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"button\",\n                    class: \"btn btn-primary\",\n                    onClick: () => {\n                      setCurrentPost(item._id);\n                    },\n                    children: \"Show\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 446,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 435,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 388,\n                columnNumber: 37\n              }, this)]\n            }, item._id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 371,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 370,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(Profile, \"TL8UybPwsLAmdL03E3Ucf/vrX/E=\", false, function () {\n  return [useParams];\n});\n\n_c = Profile;\nexport default Profile;\n\nvar _c;\n\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"sources":["C:/Users/Raj/Desktop/Social Networking/Frontend/client/src/components/screens/UserProfile.js"],"names":["React","useEffect","useState","useContext","UserContext","useParams","Profile","userProfile","setProfile","state","dispatch","userid","console","log","JSON","stringify","fetch","headers","localStorage","getItem","then","res","json","result","likePost","id","method","body","postId","newdata","user","posts","map","item","_id","catch","err","unlikePost","loveReact","removeLoveReact","reporting","withdrawing","makeComment","text","deletepost","postid","Authorization","filter","followUser","followId","data","type","payload","setItem","prevstate","followers","unfollowUser","unfollowId","newfollower","currentPost","setCurrentPost","maxWidth","margin","display","justifyContent","borderBottom","width","height","borderRadius","name","email","length","following","padding","includes","color","fontFamily","paddingLeft","paddingTop","postedBy","isadmin","reports","float","cursor","title","photo","favourite","likes","comments","record","fontWeight","e","preventDefault","target","value"],"mappings":"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","sourcesContent":["import React,{useEffect,useState,useContext} from 'react'\r\nimport {UserContext} from '../../App'\r\nimport {useParams} from 'react-router-dom'\r\n\r\nconst Profile=()=>{\r\n    const [userProfile,setProfile]=useState(null)\r\n    const {state,dispatch}=useContext(UserContext)\r\n    const {userid}=useParams()\r\n    console.log(\"state in user profile becomes \"+JSON.stringify(state))\r\n    //const [showFollowers,setShowFollowers]=useState(true)\r\n    // console.log(userProfile)\r\n    useEffect(()=>{\r\n        fetch(`/user/${userid}`,{\r\n            headers:{\r\n                \"Authorization\":\"token \"+localStorage.getItem(\"jwt\")\r\n            }\r\n        }).then(res=>res.json())\r\n        .then(result=>{\r\n            setProfile(result)\r\n            // console.log(\"result=\"+JSON.stringify(result))\r\n        })\r\n    },[])\r\n\r\n    const likePost=(id)=>{\r\n        fetch('/like',{\r\n            method: \"put\",\r\n            headers:{\r\n                \"Content-Type\":\"application/json\",\r\n                \"Authorization\":\"token \"+localStorage.getItem(\"jwt\")\r\n            },\r\n            body:JSON.stringify({\r\n                postId:id\r\n            })\r\n        }).then(res=>res.json())\r\n        .then(result=>{\r\n            //result means the updated post\r\n            const newdata={user:userProfile.user,posts:{}}\r\n            newdata.posts=userProfile.posts.map(item=>{\r\n                if(item._id==result._id){\r\n                    return result\r\n                }\r\n                else{\r\n                    return item\r\n                }\r\n            })\r\n            //newdata means the entire updated array consisting of all the posts of every user in the home page.\r\n            setProfile(newdata)\r\n        })\r\n        .catch(err=>{\r\n            console.log(err)\r\n        })\r\n    }\r\n    const unlikePost=(id)=>{\r\n        fetch('/unlike',{\r\n            method: \"put\",\r\n            headers:{\r\n                \"Content-Type\":\"application/json\",\r\n                \"Authorization\":\"token \"+localStorage.getItem(\"jwt\")\r\n            },\r\n            body:JSON.stringify({\r\n                postId:id\r\n            })\r\n        }).then(res=>res.json())\r\n        .then(result=>{\r\n            // console.log(\"result: \"+JSON.stringify(result))\r\n            // console.log(\"item: \"+JSON.stringify(data[0]))\r\n            const newdata={user:userProfile.user,posts:{}}\r\n            newdata.posts=userProfile.posts.map(item=>{\r\n                if(item._id==result._id){\r\n                    return result\r\n                }\r\n                else{\r\n                    return item\r\n                }\r\n            })\r\n            //newdata means the entire updated array consisting of all the posts of every user in the home page.\r\n            setProfile(newdata)\r\n        })\r\n        .catch(err=>{\r\n            console.log(err)\r\n        })\r\n    }\r\n\r\n    const loveReact=(id)=>{\r\n        fetch('/fav',{\r\n            method: \"put\",\r\n            headers:{\r\n                \"Content-Type\":\"application/json\",\r\n                \"Authorization\":\"token \"+localStorage.getItem(\"jwt\")\r\n            },\r\n            body:JSON.stringify({\r\n                postId:id\r\n            })\r\n        }).then(res=>res.json())\r\n        .then(result=>{\r\n            //result means the updated post\r\n            const newdata={user:userProfile.user,posts:{}}\r\n            newdata.posts=userProfile.posts.map(item=>{\r\n                if(item._id==result._id){\r\n                    return result\r\n                }\r\n                else{\r\n                    return item\r\n                }\r\n            })\r\n            //newdata means the entire updated array consisting of all the posts of every user in the home page.\r\n            setProfile(newdata)\r\n        })\r\n        .catch(err=>{\r\n            console.log(err)\r\n        })\r\n    }\r\n\r\n    const removeLoveReact=(id)=>{\r\n        fetch('/removefav',{\r\n            method: \"put\",\r\n            headers:{\r\n                \"Content-Type\":\"application/json\",\r\n                \"Authorization\":\"token \"+localStorage.getItem(\"jwt\")\r\n            },\r\n            body:JSON.stringify({\r\n                postId:id\r\n            })\r\n        }).then(res=>res.json())\r\n        .then(result=>{\r\n            // console.log(\"result: \"+JSON.stringify(result))\r\n            // console.log(\"item: \"+JSON.stringify(data[0]))\r\n            const newdata={user:userProfile.user,posts:{}}\r\n            newdata.posts=userProfile.posts.map(item=>{\r\n                if(item._id==result._id){\r\n                    return result\r\n                }\r\n                else{\r\n                    return item\r\n                }\r\n            })\r\n            //newdata means the entire updated array consisting of all the posts of every user in the home page.\r\n            setProfile(newdata)\r\n        })\r\n        .catch(err=>{\r\n            console.log(err)\r\n        })\r\n    }\r\n\r\n    const reporting=(id)=>{\r\n        fetch('/report',{\r\n            method: \"put\",\r\n            headers:{\r\n                \"Content-Type\":\"application/json\",\r\n                \"Authorization\":\"token \"+localStorage.getItem(\"jwt\")\r\n            },\r\n            body:JSON.stringify({\r\n                postId:id\r\n            })\r\n        }).then(res=>res.json())\r\n        .then(result=>{\r\n            //result means the updated post\r\n            const newdata={user:userProfile.user,posts:{}}\r\n            newdata.posts=userProfile.posts.map(item=>{\r\n                if(item._id==result._id){\r\n                    return result\r\n                }\r\n                else{\r\n                    return item\r\n                }\r\n            })\r\n            //newdata means the entire updated array consisting of all the posts of every user in the home page.\r\n            setProfile(newdata)\r\n        })\r\n        .catch(err=>{\r\n            console.log(err)\r\n        })\r\n    }\r\n\r\n    const withdrawing=(id)=>{\r\n        fetch('/rmvreport',{\r\n            method: \"put\",\r\n            headers:{\r\n                \"Content-Type\":\"application/json\",\r\n                \"Authorization\":\"token \"+localStorage.getItem(\"jwt\")\r\n            },\r\n            body:JSON.stringify({\r\n                postId:id\r\n            })\r\n        }).then(res=>res.json())\r\n        .then(result=>{\r\n            // console.log(\"result: \"+JSON.stringify(result))\r\n            // console.log(\"item: \"+JSON.stringify(data[0]))\r\n            const newdata={user:userProfile.user,posts:{}}\r\n            newdata.posts=userProfile.posts.map(item=>{\r\n                if(item._id==result._id){\r\n                    return result\r\n                }\r\n                else{\r\n                    return item\r\n                }\r\n            })\r\n            //newdata means the entire updated array consisting of all the posts of every user in the home page.\r\n            setProfile(newdata)\r\n        })\r\n        .catch(err=>{\r\n            console.log(err)\r\n        })\r\n    }\r\n\r\n    const makeComment=(text,postId)=>{\r\n        fetch('/comment',{\r\n            method:\"put\",\r\n            headers:{\r\n                \"Content-Type\":\"application/json\",\r\n                \"Authorization\":\"token \"+localStorage.getItem(\"jwt\")\r\n            },\r\n            body:JSON.stringify({\r\n                postId,\r\n                text\r\n            })\r\n        })\r\n        .then(res=>res.json())\r\n        .then(result=>{\r\n            const newdata={user:userProfile.user,posts:{}}\r\n            newdata.posts=userProfile.posts.map(item=>{\r\n                if(item._id==result._id){\r\n                    return result\r\n                }\r\n                else{\r\n                    return item\r\n                }\r\n            })\r\n            setProfile(newdata)\r\n        })\r\n        .catch(err=>{\r\n            console.log(err)\r\n        })\r\n    }\r\n\r\n    const deletepost=(postid)=>{\r\n        fetch('/deletepost/'+postid,{\r\n            method: \"delete\",\r\n            headers: {\r\n                Authorization: \"token \"+localStorage.getItem(\"jwt\")\r\n            }\r\n        }).then(res=>res.json())\r\n        .then(result=>{\r\n            const newdata={user:userProfile.user,posts:{}}\r\n            newdata.posts=userProfile.posts.filter(item=>{\r\n                return item._id!=result._id\r\n            })\r\n            setProfile(newdata)\r\n        })\r\n    }\r\n\r\n    const followUser=()=>{\r\n        fetch('/follow',{\r\n            method:\"put\",\r\n            headers:{\r\n                \"Content-Type\":\"application/json\",\r\n                \"Authorization\":\"token \"+localStorage.getItem('jwt')\r\n            },\r\n            body:JSON.stringify({\r\n                followId:userid\r\n            })\r\n        }).then(res=>res.json())\r\n        .then(data=>{\r\n            console.log(data)\r\n            dispatch({type:\"UPDATE\",payload:data})\r\n            localStorage.setItem(\"user\",JSON.stringify(data))\r\n            setProfile((prevstate)=>{\r\n                // console.log(\"hi\")\r\n                // console.log(prevstate)\r\n                // console.log(data)\r\n                // console.log(\"hello\")\r\n                return {\r\n                    ...prevstate,\r\n                    user:{\r\n                        ...prevstate.user,\r\n                        followers:[...prevstate.user.followers,data._id]\r\n                    }\r\n                }\r\n            })\r\n            //setShowFollowers(false)\r\n        })\r\n    }\r\n\r\n    const unfollowUser=()=>{\r\n        fetch('/unfollow',{\r\n            method:\"put\",\r\n            headers:{\r\n                \"Content-Type\":\"application/json\",\r\n                \"Authorization\":\"token \"+localStorage.getItem('jwt')\r\n            },\r\n            body:JSON.stringify({\r\n                unfollowId:userid\r\n            })\r\n        }).then(res=>res.json())\r\n        .then(data=>{\r\n            console.log(data)\r\n            dispatch({type:\"UPDATE\",payload:data})\r\n            localStorage.setItem(\"user\",JSON.stringify(data))\r\n            setProfile((prevstate)=>{\r\n                // console.log(\"hi\")\r\n                // console.log(prevstate)\r\n                // console.log(data)\r\n                // console.log(\"hello\")\r\n                const newfollower=prevstate.user.followers.filter((item)=>{\r\n                    // console.log(\"item=\"+item)\r\n                    // console.log(\"item._id=\"+item._id)//id of any random follower in the followers array\r\n                    // console.log(\"data=\"+JSON.stringify(data))\r\n                    // console.log(\"data._id=\"+data._id)//id of logged in user.\r\n                    return item != data._id//means we are selecting all the followers from the followers array except the logged in follower.\r\n                })\r\n                return {\r\n                    ...prevstate,\r\n                    user:{\r\n                        ...prevstate.user,\r\n                        followers:newfollower\r\n                    }\r\n                }\r\n            })\r\n            //setShowFollowers(true)\r\n        })\r\n    }\r\n\r\n    const [currentPost,setCurrentPost]=useState(\"\")\r\n    //console.log(\"state=\"+JSON.stringify(state))\r\n    return (\r\n        <>\r\n        {!userProfile?<h1>LOADING...</h1>\r\n        :\r\n        <div style={{\r\n            maxWidth: \"550px\", margin: \"0px auto\"\r\n        }}>\r\n            <div style={{\r\n                display: \"flex\",\r\n                justifyContent: \"space-around\",\r\n                margin: \"18px 0px\",\r\n                borderBottom: \"1px solid grey\"\r\n            }}>\r\n                <div>\r\n                    <img style={{width: \"160px\", height: \"160px\", borderRadius: \"80px\"}}\r\n                    src=\"https://images.unsplash.com/photo-1609439408825-b2a24e29871f?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=334&q=80\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <h4>{userProfile.user.name}</h4>\r\n                    <h6>{userProfile.user.email}</h6>\r\n                    <div style={{display: \"flex\", justifyContent: \"space-between\", width:\"108%\"}}>\r\n                        <h6>{userProfile.posts.length} posts</h6>\r\n                        <h6>{userProfile.user.followers.length} followers</h6>\r\n                        <h6>{userProfile.user.following.length} followings</h6>\r\n                    </div>\r\n                    <div style={{padding:\"10px\"}}>\r\n                        {\r\n                            !state.following.includes(userProfile.user._id)\r\n                            ?\r\n                            <button class=\"btn waves-effect waves-light\" onClick={()=>followUser()}>\r\n                                Follow\r\n                            </button>\r\n                            :\r\n                            <button class=\"btn waves-effect waves-light\" onClick={()=>unfollowUser()}>\r\n                                Unfollow\r\n                            </button>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"gallery\">\r\n                {\r\n                    userProfile.posts.map((item)=>{\r\n                        return (\r\n                            <div>\r\n                                <div key={item._id} className=\"card profile-card\">\r\n                                    <h5\r\n                                    style={{color:\"grey\",fontFamily:'cursive',paddingLeft:'20px',paddingTop:'10px'}}>\r\n                                    Posted by {item.postedBy.name}\r\n                                    {/*item.postedBy._id refers to the post id and state._id refers to the user id*/}\r\n                                    {(item.postedBy._id==state._id || (state.isadmin && item.reports.length>0)) \r\n                                    && <i className=\"material-icons\" style={{float:\"right\",cursor:\"pointer\"}}\r\n                                    onClick={()=>{deletepost(item._id)}}\r\n                                    >delete</i>}\r\n                                    </h5>\r\n                                    <div className=\"card-content\">\r\n                                        <h6>{item.title}</h6>\r\n                                        <p>{item.body}</p>\r\n                                    </div>\r\n                                    <div className=\"card-image card-content\">\r\n                                        <img key={item._id} src={item.photo}/>\r\n                                    </div>\r\n                                    <div className=\"card-content\">\r\n                                        {\r\n                                            item.favourite.includes(state._id)\r\n                                            ?\r\n                                            <i className=\"material-icons\" style={{color: \"red\",cursor:\"pointer\"}} onClick={()=>{removeLoveReact(item._id)}}>favorite</i>\r\n                                            :\r\n                                            <i className=\"material-icons\" style={{color: \"red\",cursor:\"pointer\"}} onClick={()=>{loveReact(item._id)}}>favorite_border</i>\r\n                                        }\r\n                                        <span>{item.favourite.length}    </span>\r\n                                        {\r\n                                            item.likes.includes(state._id)\r\n                                            ?\r\n                                            <i className=\"material-icons\" style={{cursor: 'pointer'}} onClick={()=>{unlikePost(item._id)}}>thumb_up</i>\r\n                                            :\r\n                                            <i className=\"material-icons\" style={{cursor: 'pointer'}} onClick={()=>{likePost(item._id)}}>thumb_up_off_alt</i>\r\n                                        }\r\n                                        <span>{item.likes.length}</span>\r\n                                        {\r\n                                            !(state.isadmin||(item.postedBy._id==state._id))\r\n                                            ?\r\n                                            item.reports.includes(state._id)\r\n                                            ?\r\n                                            <button className=\"btn btn-primary\" style={{float:\"right\"}} onClick={()=>{withdrawing(item._id)}}>Reported</button>\r\n                                            :\r\n                                            <button className=\"btn btn-primary\" style={{float:\"right\"}} onClick={()=>{reporting(item._id)}}>Report</button>\r\n                                            :\r\n                                            \"\"\r\n                                        }\r\n                                        <br></br>\r\n                                        {\r\n                                            state.isadmin\r\n                                            ?\r\n                                            <p>reported {item.reports.length} times</p>\r\n                                            :\r\n                                            \"\"\r\n                                        }\r\n                                        {\r\n                                            (item._id==currentPost) \r\n                                            ?\r\n                                            item.comments.map(record=>{\r\n                                                return (\r\n                                                    <h6 key={record._id}><span style={{fontWeight:\"700\"}}>{record.postedBy.name} </span>{record.text}</h6>\r\n                                                )\r\n                                            })\r\n                                            :\r\n                                            <p style={{fontWeight:\"300\"}}>Click on show below to check comments..</p>\r\n                                        }\r\n                                        <form onSubmit={(e)=>{\r\n                                            e.preventDefault()\r\n                                            makeComment(e.target[0].value,item._id)\r\n                                            e.target[0].value=\"\"//I added this line\r\n                                        }}>\r\n                                            <input type=\"text\" placeholder=\"Add a comment\"/>\r\n                                            {\r\n                                                (item._id==currentPost)\r\n                                                ?\r\n                                                <button type=\"button\" class=\"btn btn-primary\" onClick={()=>{setCurrentPost(\"\")}}>Hide</button>\r\n                                                :\r\n                                                <button type=\"button\" class=\"btn btn-primary\" onClick={()=>{setCurrentPost(item._id)}}>Show</button>\r\n                                            }\r\n                                    \r\n                                        </form>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n                \r\n            </div>\r\n        </div>\r\n        }\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Profile"]},"metadata":{},"sourceType":"module"}